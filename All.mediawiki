= Manual =
<code> git <CMD> --help</code>

= Training =
List:
* show changes
** since last commit <code>git diff</code>
** between current and a branch  <code>? </code>
** between 2 branches  <code>git diff <BRANCH_1> <BRANCH_2> </code>
* commit
** per hunks <code> git add --patch </code>
** without test (disable pre-commit hook) <code>git commit --no-verify </code>
** change last commit <code>git commit --amend </code>
* push
** without test (disable pre-push hook) <code>git push --no-verify </code>
** after rebase <code>git push --force--with-lease </code> (preventing someone else'change to be overwritten)




= Common =

== create repo ==
=== .gitattributes ===
[https://git-scm.com/docs/gitattributes doc]
==== attributes ====
4 operations:
* set with no value : * text
* unset: * -text
* set with specific value: * text=auto
* unspecified: * !text

==== header ====
Header (that apply to ALL files) starts by <code> * </code>, eg: <code> * text=auto </code>
</br>
Normalization: when a text file is normalized, its line endings are converted to LF in the repository.

===== text =====
Control when normalization is triggered.
Values:
* set : do not check if file contains text, normalize anyway
* unset: do not check for text, never normalize (check-in and check-out)
* auto : check for text on check-in; if this is text, normalize (when the file has been committed with CRLF, no conversion is done ??)
* unspecified : use user-specific settings instead (core.autocrlf)

===== eol =====
Control how normalization is applied.
Values:
* CRLF:
** on check-in: force normalization (convert to LF)
** on check-out: convert LE to CRLF
* LF:
** on check-in: force normalization (convert to LF)
** on check-out: prevent conversion to CRLF (preserve LF)
* unspecified (!eol): look at the core.eol config

[https://stackoverflow.com/questions/21302670/what-does-eol-in-gitattributes-do More on that]

== clone ==
Clone in specific folder <br>
<code>git clone git@github.com:whatever FOLDER_NAME</code>

==branch==

==checkout==

===branch===
===tag===
<pre>
git checkout version <TAG_NAME> -b <BRANCH_NAME>
git checkout tags/version <TAG_NAME> -b <BRANCH_NAME>
</pre>


== stash ==
Manage uncommited changes when switching branches.

Handful:
* push changes to stash <code> git stash push </code>
* list stashed changes <code> git stash list </code>
* pop changes from stash <code> git stash pop </code>
* show stash in status: <code>git config --global status.showStash true</code>

Specifics
* restore specific stashed changes <code> git stash apply <STASH_ID></code>
* clear the stash <code>git stash clear </code>

Stash file section (aka hunks, parts of patches):
* <code> git stash push --patch (-p)</code>

==diff==
Discard end-of-line difference (use it only on Windows) <br/>
<code>git config --global core.whitespace cr-at-eol</code>

==add==
Handful:
* add modified,deleted <code>git add --all </code>
* add all (new, modified,deleted) <code>git add --all </code>
* handle hunks separately <code> git add --patch </code>

[https://nuclearsquid.com/writings/git-add/ More on --patch]

== commit ==
List:
* [https://chris.beams.io/posts/git-commit/ Write a comment]
* you forgot something
** and not pushed
*** just a line: <code> git commit --amend </code>
*** changed many things, change the commit message <code> git commit --amend --no-edit </code>
** and already pushed : <code>git push --force origin <BRANCH></code>

== compare ==

View all modifications on a single file
<code>git log --follow -- <FILE_NAME></code>
<br/>

View all modifications made by a commit
<code>git show <COMMIT_SHA1></code>
<br/>

Compare 2 branches, ignoring spaces
<code> git diff --ignore-space-change <BRANCH_1> <BRANCH_2> </code>
<br/>
== cleanup ==

Remove remote branches  <br/>
<code>git fetch -p</code> <br/>

Remove local branches not on remote  <br/>
<code>git remote prune origin</code> <br/>

== Exclude files ==
For files you don't want to be handled in git:
* binary files;
* temporary files;
* IDE files.

=== shared (.gitignore) ===
Create a <code>.gitignore</code> file, at root of the repo, and commit it. <br/>

Example for all java compiled classes <code>*.class</code><br/>
<pre>
*.class
</pre>

In you want to exclude some file under a specific folder, that may be anywhere in your repo, prefix this folder with a <code>**/</code><br/>
<pre>
**/.idea/workspace.xml
</pre>

However, if .gitignore has been modified after files appeared in untracked changed, these files won't disappear. <br/>
Execute this to remove them form untracked changes. <br/>
<pre>
git rm -r --cached .
git add .
git commit -m "fixed untracked files"
</pre>

=== local ===
To deal with specific issues (ie: some use Windows, some others Linux)

==== this repository (exclude) =====
Update the repo-based local file <code>exclude</code>: it will filter objects before the shared <code>.gitignore</code> applies. <br>
It is stored in <code>.git/info/exclude</code>

==== all repositories (~/.gitignore) ====
Setup
<pre>
touch ~/.gitignore
git config --global core.excludesfile '~/.gitignore'
</pre>

Remove
<code>git config --global --unset core.excludesfile</code>

==Encoding and other funny things==

===End of line===
=> to check...
Git store everything in repository by default using Unix EOL characters : LF. (??)
<code> core.autocrlf </code> parameter controls this:
* true: Checkout Windows-style, commit Unix-style;
* input: Checkout as-is, commit Unix-style (when working in Unix, if by incident a bad file is introduced, it will be normalized);
* false: Checkout as-is, commit as-is.

For single platforms projects, set false.
(If platform is Windows, Git will store CRLF in repository).

For cross-platforms projects, use LF in repository, so set:
* Unix: input (or false if you're lucky);
* Windows: true.

true: ensure that
* normalize text files when added
* files that are already normalized in the repository stay normalized.

If not set, default value is applied: false.
==Config==
===List===
Handful:
* get existing settings file: <code> git config --list --show-origin </code>
* show all config values : <code> git config --list --show-origin </code>
* show all repository-specific values: <code> git config --local --list </code>
* show specific config value : <code> git config --get <PROPERTY> </code>
===Set===
Set config on repository (not global) </br>
Command-line
<pre>
git config user.name “Joe Bloggs”
git config user.email “jbloggs@alternativedomain.com”
</pre>
Config file (.git/config) </br>
<pre>
[user]
        name  = "Joe Bloggs”
        email = “jbloggs@alternativedomain.com”
</pre>

===Remove===
<code> git config --global --unset <PROPERTY> </code>

=Misc=

List:
* locate local repo : <code> find ~ -name ".git" 2>/dev/null </code>

==Compare repos==
Steps:
* add target    <code> git remote add -f b path/to/repo_b.git </code>
* update target <code> git remote update </code>
* get diff      <code> git diff master remotes/b/master </code>
* remove target <code> git remote rm b </code>


==Update==
Windows : <code> git update-git-for-windows </code>

</br>
Get remote: <code>.git/config</code>
<pre>
(..)
[remote "origin"]
	url = https://github.com/g0t4/jenkins2-course-spring-boot.git
	fetch = +refs/heads/*:refs/remotes/origin/*
(..)
</pre>

Get all repositories (= find all .git folders):
* Linux: <code> find / -name ".git" </code>
* Windows (PowerShell) : <code>Get-ChildItem . -Attributes Directory,Directory+Hidden -ErrorAction SilentlyContinue -Include ".git" -Recurse</code>

Show git location in git-bash <code>where git.exe </code>

== Commit template ==

Some templates
* [https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html Tim Pope]

Add template
<pre>
echo "Feature - Symptom - Cause " > .gitCommitTemplate
git config --global commit.template .gitCommitTemplate
</pre>

Save last commit (?)
<pre>
vi .git/hooks/post-commit

#!/bin/sh
printf "`git log -1 --pretty=%s`" > .gitmessage.txt

chmod +x .git/hooks/post-commit
</pre>

[https://itnext.io/enforcing-commit-templates-8cf3dbfe2510 Prepare commit message & enforce rules]

== Modify pushed commit ==

Remove an already-pushed commit (warn people that checked it out locally)
<pre>
git reset --hard HEAD^
git push --force-with-lease
</pre>

[https://tecadmin.net/delete-commit-history-in-github/ Remove from history  implies remove all history]


= Search release for commit=
Get commit id: <code>git log --all --grep='<COMMIT MESSAGE>'</code>
Get release : <code>git tag --contains 0a1e9318253b237a2f0b5e85c1e00c8b1e655777</code>
